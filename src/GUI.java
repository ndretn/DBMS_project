import javax.naming.LimitExceededException;
import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;

/**
 * @author Matteo
 */
public class GUI extends javax.swing.JFrame {
    /**
     * The JDBC driver to be used
     */
    private static final String DRIVER = "org.postgresql.Driver";

    // Checks variables
    public static long maxMemoryUsed;
    public static int MAX_MEMORY;
    public static long MAX_TIME;

    //Variables declaration
    // the connection to the DBMS
    Connection con = null;
    private Statement stmt = null;
    private ResultSet rs = null;
    private long start;
    private long end;
    private String messages = "";
    private GUI gui;
    private Graph g;
    private boolean terminated;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        gui = this;
        MAX_MEMORY = Integer.parseInt(memoryTextfield.getText());
        MAX_TIME = 60 * 1000 * Long.parseLong(timeTextfield.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        usernameTextfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        databaseTextfield = new javax.swing.JTextField();
        passwordTextfield = new javax.swing.JPasswordField();
        loadButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        queryTextField = new javax.swing.JTextField();
        queryTextField.setEnabled(false);
        executeButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        heapTextfield = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        memoryTextfield = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        timeTextfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Banks GUI");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Username:");

        usernameTextfield.setText("postgres");

        jLabel2.setText("Password:");

        jLabel3.setText("Database:");

        databaseTextfield.setText("mondial");

        loadButton.setText("Load database");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel3))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(databaseTextfield)
                                                        .addComponent(passwordTextfield)
                                                        .addComponent(usernameTextfield)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(loadButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(usernameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(passwordTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(databaseTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Output");

        outputText.setColumns(20);
        outputText.setRows(5);
        jScrollPane1.setViewportView(outputText);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                .addContainerGap())
        );

        jLabel5.setText("State:");

        stateLabel.setText("not connected");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("Query:");

        executeButton.setText("Execute");
        executeButton.setEnabled(false);
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Max Heap Size:");

        heapTextfield.setText("100");
        heapTextfield.setEnabled(false);

        jLabel8.setText("Max memory (mb):");

        memoryTextfield.setText("5120");
        memoryTextfield.setEnabled(false);

        jLabel9.setText("Max execution time:");

        timeTextfield.setText("60");
        timeTextfield.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(queryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(executeButton))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel8)
                                                        .addComponent(jLabel9)
                                                        .addComponent(jLabel6))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(heapTextfield)
                                                        .addComponent(timeTextfield)
                                                        .addComponent(memoryTextfield))))
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(heapTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(memoryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel9)
                                        .addComponent(timeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(queryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(executeButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(stateLabel)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(stateLabel))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {
        messages = "";
        try {
            // Register the JDBC driver
            Class.forName(DRIVER);
            System.out.printf("Driver %s successfully registered.%n", DRIVER);
            messages += "Driver " + DRIVER + " successfully registered\n";
        } catch (ClassNotFoundException e) {
            System.out.printf("Driver %s not found: %s.%n", DRIVER, e.getMessage());
            messages += "Driver " + DRIVER + " not found:" + e.getMessage() + " milliseconds.\n";
            // Terminate with a generic error code
            System.exit(-1);
        }
        try {
            // Connect to the database
            start = System.currentTimeMillis();
            con = DriverManager.getConnection("jdbc:postgresql://localhost/" + databaseTextfield.getText(), usernameTextfield.getText(), passwordTextfield.getText());
            end = System.currentTimeMillis();
            messages += "Connection to database " + databaseTextfield.getText() + " successfully established in " + (end - start) + " milliseconds.\n";

            loadButton.setEnabled(false);
            databaseTextfield.setEnabled(false);
            usernameTextfield.setEnabled(false);
            passwordTextfield.setEnabled(false);
            start = System.currentTimeMillis();
            stateLabel.setText("Loading the graph, please wait...");
            SwingWorker s = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() {
                    DatabaseDataLoader db = new DatabaseDataLoader(con);
                    try {
                        g = db.getGraph(gui);
                    } catch (SQLException | IOException e) {
                        e.printStackTrace();
                    }
                    return null;
                }

                @Override
                protected void done() {
                    enableElements(true);
                    stateLabel.setText("Graph loaded");
                    end = System.currentTimeMillis();
                    messages += "Graph successfully created in " + (end - start) / 1000 + " seconds.\n";
                    JOptionPane.showMessageDialog(rootPane, messages);
                }
            };
            s.execute();
        } catch (SQLException e) {
            stateLabel.setText("Non connesso.");
            enableElements(false);
            System.out.printf("Database access error:%n");
            messages += "Database access error:\n";
            // cycle in the exception chain
            while (e != null) {
                System.out.printf("- Message: %s%n", e.getMessage());
                messages += "- Message: " + e.getMessage() + "\n";
                System.out.printf("- SQL status code: %s%n", e.getSQLState());
                messages += "- SQL status code: " + e.getSQLState() + "\n";
                System.out.printf("- SQL error code: %s%n", e.getErrorCode());
                messages += "- SQL error code: " + e.getErrorCode() + "\n";
                System.out.printf("%n");
                JOptionPane.showMessageDialog(rootPane, messages);
                e = e.getNextException();
            }
        }

    }

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        outputText.setText("");
        stateLabel.setText("Executing Banks algorithm, please wait...");
        MAX_MEMORY = Integer.parseInt(memoryTextfield.getText());
        MAX_TIME = 60 * 1000 * Long.parseLong(timeTextfield.getText());

        SwingWorker s = new SwingWorker<Void, Void>() {
            ArrayList<Banks.ResultTree> outputHeap;

            @Override
            protected Void doInBackground() {
                try {
                    terminated = false;
                    enableElements(false);
                    Banks b = new Banks(g, queryTextField.getText().split(" "), gui, Integer.parseInt(heapTextfield.getText()));
                    outputHeap = b.execute();
                    terminated = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void done() {
                if (terminated) {
                    int treeReturned = 0;
                    while (treeReturned < Banks.MAX_RESULTS_NUMBER && outputHeap.size() != 0) {
                        Banks.ResultTree treeToOutput = outputHeap.get(treeReturned);
                        outputText.append(treeToOutput.toString());
                        treeReturned++;
                    }
                }
                enableElements(true);
                stateLabel.setText("Banks execution terminated");
            }
        };
        s.execute();


    }

    /**
     * Set the value of the progressbar
     *
     * @param progress progress to set
     */
    public void setLoadingGraphProgress(int progress) {
        jProgressBar1.setValue(progress);
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        String messages = "";
        try {
            // Close the used resources
            if (rs != null) {
                start = System.currentTimeMillis();
                rs.close();
                end = System.currentTimeMillis();
                System.out.printf("Result set successfully closed in %,d milliseconds.%n", end - start);
                messages += "Result set successfully closed in " + (end - start) + " milliseconds.\n";
            }
            if (stmt != null) {
                start = System.currentTimeMillis();
                stmt.close();
                end = System.currentTimeMillis();
                System.out.printf("Statement successfully closed in %,d milliseconds.%n", end - start);
                messages += "Statement successfully closed in " + (end - start) + " milliseconds.\n";
            }
            if (con != null) {
                start = System.currentTimeMillis();
                con.close();
                end = System.currentTimeMillis();
                System.out.printf("Connection successfully closed in %,d milliseconds.%n", end - start);
                messages += "Connection successfully closed in " + (end - start) + " milliseconds.\n";
            }
        } catch (SQLException e) {
            System.out.printf("Error while releasing resources:%n");
            messages += "Error while releasing resources:\n";
            // Cycle in the exception chain
            while (e != null) {
                System.out.printf("- Message: %s%n", e.getMessage());
                messages += "- Message: " + e.getMessage() + "\n";
                System.out.printf("- SQL status code: %s%n", e.getSQLState());
                messages += "- SQL status code: " + e.getSQLState() + "\n";
                System.out.printf("- SQL error code: %s%n", e.getErrorCode());
                messages += "- SQL error code: " + e.getErrorCode() + "\n";
                System.out.printf("%n");
                e = e.getNextException();
            }
        } finally {
            // Release resources to the garbage collector
            if (rs != null || stmt != null) {
                rs = null;
                stmt = null;
                System.out.printf("Resources released to the garbage collector.%n");
                messages += "Resources released to the garbage collector.\n";
            }
        }
        if (!messages.equals("")) {
            JOptionPane.showMessageDialog(rootPane, messages);
        }

    }

    private void enableElements(boolean state) {
        executeButton.setEnabled(state);
        queryTextField.setEnabled(state);
        heapTextfield.setEnabled(state);
        memoryTextfield.setEnabled(state);
        timeTextfield.setEnabled(state);
    }

    public void checkTime(long startTime) throws LimitExceededException {
        // Check time
        if ((System.currentTimeMillis() - startTime) > MAX_TIME) {
            System.out.println("Time limit exceeded. TERMINATED");
            outputText.append("Time limit exceeded. TERMINATED");
            enableElements(true);
            throw new LimitExceededException();
        }
    }

    public void checkMemory() {
        // Check max memory
        if (maxMemoryUsed > MAX_MEMORY) {
            // Force garbage collector
            System.gc();
            if (maxMemoryUsed > MAX_MEMORY) {
                System.out.println("Memory limit exceeded. TERMINATED");
                outputText.append("Memory limit exceeded. TERMINATED");
                enableElements(true);
                throw new OutOfMemoryError();
            }
        }
    }

    public void updateUsedMemoryStats() {
        long currentMemoryUsed;
        long mb = 1024 * 1024;
        Runtime runtime = Runtime.getRuntime();
        currentMemoryUsed = (runtime.totalMemory() - runtime.freeMemory()) / mb;
        if (maxMemoryUsed < currentMemoryUsed) {
            maxMemoryUsed = currentMemoryUsed;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                GUI g = new GUI();
                g.setLocation(dim.width / 2 - g.getSize().width / 2, dim.height / 2 - g.getSize().height / 2);
                g.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JTextField databaseTextfield;
    private javax.swing.JButton executeButton;
    private javax.swing.JTextField heapTextfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField memoryTextfield;
    private javax.swing.JTextArea outputText;
    private javax.swing.JPasswordField passwordTextfield;
    private javax.swing.JTextField queryTextField;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField timeTextfield;
    private javax.swing.JTextField usernameTextfield;
    // End of variables declaration
}
